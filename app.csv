import streamlit as st
import serial
import time
import pandas as pd
import os

# --- Arduino Serial Setup ---
arduino_port = "COM4"   # Change this to your port (e.g., /dev/ttyUSB0 for Linux)
baud = 9600

try:
    ser = serial.Serial(arduino_port, baud, timeout=1)
    time.sleep(2)  # wait for Arduino to reset
except:
    st.error("⚠️ Could not connect to Arduino. Check the port.")
    ser = None

# --- Streamlit Page Setup ---
st.set_page_config(page_title="e-tongue Dashboard", layout="wide")
st.title("e-tongue")
st.markdown("pH, TDS, and Turbidity readings from Arduino Uno are displayed and saved.")

# --- Data Storage ---
csv_file = "app.csv"

if os.path.exists(csv_file):
    st.session_state.data = pd.read_csv(csv_file)
else:
    st.session_state.data = pd.DataFrame(columns=["Time", "pH", "TDS", "Turbidity"])

# --- Live Update ---
placeholder = st.empty()

while True:
    if ser and ser.in_waiting > 0:
        line = ser.readline().decode("utf-8").strip()

        try:
            # Example line: "pH: 7.12, TDS: 320.5 ppm, Turbidity: 12.3 NTU"
            parts = line.replace("ppm", "").replace("NTU", "").split(",")
            ph = float(parts[0].split(":")[1])
            tds = float(parts[1].split(":")[1])
            turbidity = float(parts[2].split(":")[1])

            # --- Save new reading ---
            new_data = {"Time": time.strftime("%H:%M:%S"), "pH": ph, "TDS": tds, "Turbidity": turbidity}
            st.session_state.data = pd.concat([st.session_state.data, pd.DataFrame([new_data])], ignore_index=True)

            # --- Save to CSV file ---
            st.session_state.data.to_csv(csv_file, index=False)

            # --- Display in Dashboard ---
            with placeholder.container():
                col1, col2, col3 = st.columns(3)
                col1.metric("pH", f"{ph:.2f}")
                col2.metric("TDS (ppm)", f"{tds:.1f}")
                col3.metric("Turbidity (NTU)", f"{turbidity:.1f}")

                st.line_chart(st.session_state.data.set_index("Time"))

        except Exception as e:
            st.warning(f"Parsing error: {line}")
